import java.util.Arrays;
import java.util.ArrayList;
import java.lang.Math;
import java.time.*;

public class Main {
    public static int[] convertToNum (String str){ // convert each letter into its corresponding number
    String newStr = str.toLowerCase(); //make sure all letters are lowercased
        String alpha = "abcdefghijklmnopqrstuvwxyz";
        int[] plainNum = new int[newStr.length()];
        for (int i = 0; i<str.length(); i++){
          System.out.println("The "+str.charAt(i)+ " letter at position "+ i + " is at the index of "+ alpha.indexOf(str.charAt(i)) );
          plainNum[i]=alpha.indexOf(str.charAt(i)); //get letter from string to convert to position of Alphabet string
        }
        return plainNum;
    }

  


    /*
    public static ArrayList<int[][]> splice(String str){
        int[][] ptMatrix = new int [2][1];
        String newStr=str.toLowerCase();
        int totalSplices = (int) Math.ceil((double) newStr.length()/2); //using ceiling division
        ArrayList<int[][]> matrixSets = new ArrayList<int[][]>(totalSplices);

        int[] convertedString = convertToNum(newStr);

        int k = 0;
        while (k<convertedString.length){

            for (int i = 0; i < ptMatrix.length-1 ; ++i){
                for (int j=0; j< ptMatrix.length-1 ; ++j){
                    ptMatrix[i][j]=convertedString[k];

                    k++;

                }
            }
            matrixSets.add(ptMatrix);
          


        }



        return matrixSets;

    }
    */
    /*
    list:
    [0    [2
     1
     2
     }


     */

    public static int[][] PlaintextToMatrix(String plaintext){
      int[][] plaintextMatrix = new int [2][1];
      int[] plainNum= convertToNum(plaintext);
      int k=0;
      for (int i = 0; i < plaintextMatrix.length ; ++i){
        for (int j=0; j< plaintextMatrix[i].length ; ++j){
          
              plaintextMatrix[i][j]=plainNum[k];
              //System.out.println("The "+k+" number is "+ plainNum[k]);
          
              
              //System.out.println("The number at the "+ i + " row and " + j + " column is " + plaintextMatrix[i][j] + " for the character " +plainNum[k] );
          k++;
                
            }
      }
      return plaintextMatrix;
    }

    public static int[][] KeyToMatrix(String key){
        int[][] keyMatrix = new int[2][2];
      int[] keyNum=convertToNum(key);
        for (int k = 0; k<keyNum.length; k++){
            for (int i = 0; i < keyMatrix.length ; ++i){
                for (int j=0; j< keyMatrix[i].length ; ++j){
                    keyMatrix[i][j]=keyNum[k];
                  System.out.println("Key to Matrix");
                  System.out.println("The number at the "+ i + " row and " + j + " column is " + keyMatrix[i][j] + " for the character " + keyNum[k] );

                    k++;

                }
            }
        }
        return keyMatrix;
    }

    public static int[][] KeyToInverseMatrix(String key){
    int[][] inverseKeyMatrix= new int[2][2];
    int[][] keyMatrix= new int[2][2];
    int[] keyNum = convertToNum(key);
    for (int k = 0; k<keyNum.length; k++){
            for (int i = 0; i < keyMatrix.length ; ++i){
                for (int j=0; j< keyMatrix[i].length ; ++j){
                    keyMatrix[i][j]=keyNum[k];
                  System.out.println("The number at the "+ i + " row and " + j + " column is " + keyMatrix[i][j] + " for the character " + keyNum[k] );

                    k++;

                }
            }
        }
    int determinant = determinant(keyMatrix);
   

    determinant = determinant % 26;
    if (determinant <0){
      determinant= determinant +26;
    }
    System.out.println(determinant);
    int modDeterminant = modInverse(determinant, 26);
      System.out.println(modDeterminant);
    
    for (int i = 0; i < inverseKeyMatrix.length ; ++i){
      for (int j=0; j< inverseKeyMatrix[i].length ; ++j){
        if(i==0 && j==0){
          inverseKeyMatrix[i][j] = modDeterminant * keyMatrix[1][1];
        }
        else if (i==0 && j==1){
          inverseKeyMatrix[i][j] = modDeterminant* (keyMatrix[i][j]*-1);
        }
        else if (i==1 && j ==0){
          inverseKeyMatrix[i][j] = modDeterminant * (keyMatrix[i][j]*-1);
        }
        else if (i==1 && j ==1 ){
          inverseKeyMatrix[i][j] = modDeterminant * keyMatrix[0][0];
        }
        else{
          System.out.println("Index out of bounds of argument for method");
        }
        System.out.println("The number at the "+ i + " row and " + j + " column is " + inverseKeyMatrix[i][j] + " because "+ determinant + " * " + keyMatrix[i][j]);
        /* ****Not working; should not be 0.0*** */
        
        
        
      }
    }
    return inverseKeyMatrix;
      
   }
    /**
   public static int gcd(int a, int b)
    {
        if (a == 0)
            return b;
 
        return gcd(b % a, a);
    }
    */

    public static int[][] MatrixMultiplication2x2 (int[][] key, int[][] ptMatrix) {
        //int[][] matrix1 = { {1, 2}, {3, 4}};
        //int[][] matrix2 = { {5}, {6} };
        int[][] result = new int[2][1];

        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 1; j++) {
                for (int k = 0; k < 2; k++) {
                    result[i][j] += key[i][k] * ptMatrix[k][j];
                }
            }
        }
       System.out.println("Result:");
        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 1; j++) {
                System.out.print(result[i][j] + " ");
            }
            System.out.println();
        }

        return result;
    }

  public static int determinant (int[][] matrix){
    int determinant = (matrix[0][0] * matrix[1][1] ) - (matrix[0][1] * matrix[1][0]);
     System.out.println((matrix[0][0] * matrix[1][1]) + " - " + (matrix[0][1] * matrix[1][0]) + " is " + ((matrix[0][0] * matrix[1][1] ) - (matrix[0][1] * matrix[1][0])) + " so the determinant is "+ determinant);
    return determinant;
  }

  public static boolean isInvertible(int[][] matrix){
    int determinant = (matrix[0][0] * matrix[1][1] ) - (matrix[0][1] * matrix[1][0]);
    if (determinant != 0){
      System.out.println("The determinant is "+ determinant);
      return true;
    }
    else{
      System.out.println("The determinant is "+ determinant);
      return false;
    }
  }

  public static boolean isModInverse(int A, int M){
     for (int X = 1; X < M; X++)
     {
          if (((A % M) * (X % M)) % M == 1){
            System.out.println(X+" is positive");
            return true;
            
          }
            
          else if (((A % M) * (X % M)) % M == -25)
          {
            System.out.println(X+" is negative");
            return true;
            
          }
     }
    System.out.println("There is no mod inverse");
        return false;
  }

  public static int modInverse(int A, int M)
    {
 
        for (int X = 1; X < M; X++){
            if (((A % M) * (X % M)) % M == 1){ return X;}
               
      else if (((A % M) * (X % M)) % M == -25){
        return X;
        
      }
        }
        return 1;
        
    }


       

  public static int[][] ModularResult (int[][] resultMatrix)
  {
    for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 1; j++) {
                
                    resultMatrix[i][j] = resultMatrix[i][j] % 26;
              if(resultMatrix[i][j]<0){
                resultMatrix[i][j]=resultMatrix[i][j]+26;
              }
                
            }
        }
    System.out.println("Result:");
        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 1; j++) {
                System.out.print(resultMatrix[i][j] + " ");
            }
            System.out.println();
        }
    return resultMatrix;
  }
  public static String EncryptedMessage(int[][] encryptedMatrix){
    String encryptedText = "";
    String alpha = "abcdefghijklmnopqrstuvwxyz";
    for (int i = 0; i < encryptedMatrix.length ; ++i){
        for (int j=0; j< encryptedMatrix[i].length ; ++j){
           encryptedText+=alpha.charAt(encryptedMatrix[i][j]);
          
             
        }
    }
    System.out.println("The text is: "+ encryptedText);
    return encryptedText;
  }

  public static int[][] DecryptedMatrix (String encryptedText){
    int[][] decryptingMatrix = new int[2][1];
    String alpha = "abcdefghijklmnopqrstuvwxyz";
    int k = 0;
      for (int i = 0; i < decryptingMatrix.length ; ++i){
        for (int j=0; j< decryptingMatrix[i].length ; ++j){
          decryptingMatrix[i][j]=alpha.indexOf(encryptedText.charAt(k));
          System.out.println("The number at the "+ i + " row and " + j + " column is " + decryptingMatrix[i][j] + " because the letter was "+ encryptedText.charAt(k));
      k++;
    }
  }
    
                
    return decryptingMatrix;
  }

   public static double[][] InverseMatrixMultiplication2x2 (double[][] key, int[][] encryptedMatrix) {
        //int[][] matrix1 = { {1, 2}, {3, 4}};
        //int[][] matrix2 = { {5}, {6} };
        double[][] result = new double[2][1];

        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 1; j++) {
                for (int k = 0; k < 2; k++) {
                    result[i][j] += key[i][k] * encryptedMatrix[k][j];
                }
            }
        }
      

        System.out.println("Result:");
        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 1; j++) {
                System.out.print(result[i][j] + " ");
            }
            System.out.println();
        }

        return result;
    }

  public static void HillCipher(){
    String plaintext1="it";
      String plaintext2="to";
      String plaintext3="hi";
      String plaintext4="me";
      String plaintext5="on";

    ArrayList<String> plaintextStrings = new ArrayList<>();
    plaintextStrings.add(plaintext1);
    plaintextStrings.add(plaintext2);
    plaintextStrings.add(plaintext3);
    plaintextStrings.add(plaintext4);
    plaintextStrings.add(plaintext5);

      String key1="qrtw";
      String key2="qplr";
      String key3="bufd";
      String key4="hwtn";
      String key5="pmzf";
    ArrayList<String> keyStrings = new ArrayList<>();
    keyStrings.add(key1);
    keyStrings.add(key2);
    keyStrings.add(key3);
    keyStrings.add(key4);
    keyStrings.add(key5);

    int i =0;
    int[][] plainMatrix;
    int[][] keyMatrix;
    int[][] resultMatrix;
    int[][] cryptedMatrix;
    String text;
    while(i<plaintextStrings.size()-1 && i<keyStrings.size()-1){
      for (int p = 0; p<plaintextStrings.size(); p++){
        for (int k=0; k<keyStrings.size(); k++){
          //encryption
          plainMatrix=PlaintextToMatrix(plaintextStrings.get(p));
          keyMatrix=KeyToMatrix(keyStrings.get(k));
          resultMatrix=MatrixMultiplication2x2(keyMatrix, plainMatrix);
          cryptedMatrix=ModularResult(resultMatrix);
          text = EncryptedMessage(cryptedMatrix);

          //decryption
          cryptedMatrix = DecryptedMatrix(text);
          keyMatrix = KeyToInverseMatrix(keyStrings.get(k));
          resultMatrix=MatrixMultiplication2x2(keyMatrix, cryptedMatrix);
          plainMatrix= ModularResult(resultMatrix);
          text= EncryptedMessage(plainMatrix);
        }
      }
      i++;   }
  }

  public static Duration bruteForce(String plaintext){
    String alpha= "abcdefghijklmnopqrstuvwxyz";
    //String match;
    
    
    int i =0;
    int k=0;
    int j = 0;
    Duration timeElapsed;
    Instant start = Instant.now();
    if (plaintext.length()==2){
      while(plaintext.charAt(0)==alpha.charAt(i)&& plaintext.charAt(1)==alpha.charAt(k)){
      for (i = 1; i< alpha.length(); i++){
        for (k = 0; k< alpha.length(); k++){
          System.out.println(alpha.charAt(i)+alpha.charAt(k));
        }
      }
    }
    Instant end = Instant.now();
    timeElapsed = Duration.between(start, end);
    System.out.println("The time elapsed is "+ timeElapsed.toNanos() + " nanoseconds");
    }
      
    else if (plaintext.length()==3){
      while(plaintext.charAt(0)==alpha.charAt(i)&& plaintext.charAt(1)==alpha.charAt(k) && plaintext.charAt(2)==alpha.charAt(j)){
      for (i = 1; i< alpha.length(); i++){
        for (k = 0; k< alpha.length(); k++){
          for (j=0; j<alpha.length(); j++){
            System.out.println(alpha.charAt(i)+alpha.charAt(k)+alpha.charAt(j));
          }
          
        }
      }
    }
    Instant end = Instant.now();
    timeElapsed = Duration.between(start, end);
    System.out.println("The time elapsed is "+ timeElapsed.toNanos() + " nanoseconds");
    }
    else{
      System.out.println("The time elapsed is null nanoseconds");
      timeElapsed = null;
    }
    
    //System.out.println("The time elapsed is "+ timeElapsed.toMillis() + " milliseconds");
    return timeElapsed;
  }

  public static void bruteForceAttack(){
    String plaintext1="cat";
      String plaintext2="dog";
      String plaintext3="hat";
      String plaintext4="cry";
      String plaintext5="mop";

    ArrayList<String> plaintextStrings = new ArrayList<>();
    plaintextStrings.add(plaintext1);
    plaintextStrings.add(plaintext2);
    plaintextStrings.add(plaintext3);
    plaintextStrings.add(plaintext4);
    plaintextStrings.add(plaintext5);

    

    for (int i = 0; i<plaintextStrings.size(); i++){
      bruteForce(plaintextStrings.get(i));
    }

    
  }

  

    public static void main(String[] args){
      HillCipher();
      bruteForceAttack();
      
      /*
      int[][] MatrixKey2 = KeyToMatrix(key2);
      boolean isInvertible2= isInvertible(MatrixKey2);
      int[][] MatrixKey4=KeyToMatrix(key4);
      boolean isInvertible4=isInvertible(MatrixKey4);
      */
      /*
      
      int determinant = determinant(inverseMatrix);
      boolean isInverse = isModInverse(determinant,26);
      
      if(isInverse){
          System.out.println("The inverse mod exists");
      }
      else{
          System.out.println("The inverse mod does not exist");
      }
      
      int inverseMod=modInverse(determinant, 26);
      System.out.println("The inverse mod is "+inverseMod);

      //bruteForce
      Duration timeElapsed = bruteForce(plaintext1);
      
      */
           
      /*
      for (int i = 0; i < plaintextMatrix1.length; ++i) {
            for (int j = 0; j < plaintextMatrix1[i].length ; ++j) {
                System.out.println("The number at the "+ i + " row and " + j + " column is " + plaintextMatrix1[i][j] );
            }
        }
      
        
        for (int i = 0; i < matrixKey1.length; ++i) {
            for (int j = 0; j < matrixKey1[i].length ; ++j) {
                System.out.println("The number at the "+ i + " row and " + j + " column is " + matrixKey1[i][j] );
            }
        }
    */







    }
}
